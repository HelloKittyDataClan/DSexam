from pandas import read_csv # type: ignore
from rdflib import Graph, URIRef, Literal, Namespace, RDF # type: ignore

import re

class Handler: 
    def __init__(self): 
        self.dbPathOrUrl = "" 

    def getDbPathOrUrl(self): 
        return self.dbPathOrUrl  

    def setDbPathOrUrl(self, new_path_or_url): 
        if isinstance(new_path_or_url, str):
            self.dbPathOrUrl = new_path_or_url 
            return self.dbPathOrUrl == new_path_or_url
        else:
            return False

class UploadHandler(Handler): 
    def __init__(self): 
        super().__init__() 

    def pushDataToDb(self): 
        pass 

class MetadataUploadHandler(UploadHandler):
    def pushDataToDb(self, path):
        # Define namespaces
        schema = Namespace("http://schema.org/")
        foaf = Namespace("http://xmlns.com/foaf/0.1/")  # related to person
        my_git = Namespace("http://github.com/HelloKittyDataClan/DSexam")
        ulan = Namespace("http://example.org/ulan/")
        viaf = Namespace("http://example.org/viaf/")

        # Create Graph
        meta_graph = Graph()
        meta_graph.bind("schema", schema)
        meta_graph.bind("foaf", foaf)
        meta_graph.bind("git", my_git)
        meta_graph.bind("ulan", ulan)
        meta_graph.bind("viaf", viaf)

        # Attributes related to classes
        title = URIRef("https://schema.org/title")
        date = URIRef("https://schema.org/dateCreated")
        owner = URIRef("http://github.com/HelloKittyDataClan/DSexam/owner")
        place = URIRef("https://schema.org/itemLocation")
        identifier = URIRef("https://schema.org/identifier")

        # Relation with authors among classes
        author = URIRef("https://schema.org/author")

        # Attributes related to the class Person
        name = URIRef("http://xmlns.com/foaf/0.1/name")

        # Define classes about Cultural Object
        Person = URIRef(foaf.Person)
        NauticalChart = URIRef(my_git.NauticalChart)
        ManuscriptPlate = URIRef(my_git.ManuscriptPlate)
        ManuscriptVolume = URIRef(my_git.ManuscriptVolume)
        PrintedVolume = URIRef(my_git.PrintedVolume)
        PrintedMaterial = URIRef(my_git.PrintedMaterial)
        Herbarium = URIRef(my_git.Herbarium)
        Specimen = URIRef(my_git.Specimen)
        Painting = URIRef(my_git.Painting)
        Model = URIRef(my_git.Model)
        Map = URIRef(schema.Map)

        # This is the string defining the base URL used to defined
        # the URLs of all the resources created from the data
        base_url = Namespace("http://github.com/HelloKittyDataClan/DSexam/")

        venus = read_csv(
            path,
            keep_default_na=False,
            dtype={
                "Id": "string",
                "Type": "string",
                "Title": "string",
                "Date": "string",
                "Author": "string",
                "Owner": "string",
                "Place": "string",
            },
        )

        # Definire pattern per estrapolare autori 
        author_pattern = re.compile(r"([^()]+)\s*\((ULAN:\d+|VIAF:\d+)\)")

        for idx, row in venus.iterrows():   # mi restituisce un indice e un row che contiene i valori delle colonne
            internal_id = "culturalobject-" + str(idx)  
            subject = URIRef(base_url + internal_id)

            if row["Id"] != "":
                meta_graph.add(subject, identifier, Literal(row["Id"]))

            if row["Title"] != "":
                meta_graph.add(subject, title, Literal(row["Title"]))

            if row["Date"] != "":
                meta_graph.add(subject, date, Literal(row["Date"]))

            if row["Owner"] != "":
                meta_graph.add(subject, owner, Literal(row["Owner"]))

            if row["Place"] != "":
                meta_graph.add(subject, place, Literal(row["Place"]))

            # Add to a Graph the Cultural Object
            if row["Type"] != "":
                if row["Type"].lower() == "nautical chart":
                    meta_graph.add((subject, RDF.type, NauticalChart))

                elif row["Type"].lower() == "manuscript plate":
                    meta_graph.add((subject, RDF.type, ManuscriptPlate))

                elif row["Type"].lower() == "manuscript volume":
                    meta_graph.add((subject, RDF.type, ManuscriptVolume))

                elif row["Type"].lower() == "printed volume":
                    meta_graph.add((subject, RDF.type, PrintedVolume))

                elif row["Type"].lower() == "printed material":
                    meta_graph.add((subject, RDF.type, PrintedMaterial))

                elif row["Type"].lower() == "herbarium":
                    meta_graph.add((subject, RDF.type, Herbarium))

                elif row["Type"].lower() == "specimen":
                    meta_graph.add((subject, RDF.type, Specimen))

                elif row["Type"].lower() == "painting":
                    meta_graph.add((subject, RDF.type, Painting))

                elif row["Type"].lower() == "model":
                    meta_graph.add((subject, RDF.type, Model))

                elif row["Type"].lower() == "map":
                    meta_graph.add((subject, RDF.type, Map))

            # Extract information about authors
            if row["Author"] != "":      #se la cella author non Ã¨ vuota 
                matches = author_pattern.findall(row["Author"])
                for match in matches:      #estrae nome autore e id 
                    author_name, identifier_value = match

                    # Create URI for the author
                    author_uri = URIRef(base_url + "author-" + author_name.lower().replace(" ", "-"))

                    # Add the author to the RDF graph
                    meta_graph.add((author_uri, RDF.type, foaf.Person))
                    meta_graph.add((author_uri, name, Literal(author_name.strip())))
                    meta_graph.add((subject, schema.author, author_uri))

                    # Add ULAN or VIAF identifier if present   #sono presenti entrambi 
                    if identifier_value.startswith("ULAN:"):
                        ulan_id = identifier_value.replace("ULAN:", "")
                        meta_graph.add((author_uri, ulan.identifier, ulan[ulan_id]))
                    elif identifier_value.startswith("VIAF:"):
                        viaf_id = identifier_value.replace("VIAF:", "")
                        meta_graph.add((author_uri, viaf.identifier, viaf[viaf_id]))

        return meta_graph

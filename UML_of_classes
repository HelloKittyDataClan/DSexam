from pandas import read_csv, Series
import pandas as dp
from rdflib import RDF
from rdflib import Graph, URIRef, RDF, Literal, Namespace

class Handler:
    def __init__(self):
        self.dbPathOrUrl = ""  # Inizializza il percorso o URL del database come stringa vuota

    def getDbPathOrUrl(self):
        return self.dbPathOrUrl  # Restituisci il percorso o URL del database

    def setDbPathOrUrl(self, new_path_or_url):
        self.dbPathOrUrl = new_path_or_url  # Imposta il nuovo percorso o URL per il database     
       

class UploadHandler(Handler): 
    def __init__(self): 
        super().__init__() 

    def pushDataToDb(self): 
        pass 

class MetadataUploadHandler(UploadHandler):
    def pushDataToDb(self, path):

    #define namespaces
    schema = Namespace("http://schema.org/")
    foaf = Namespace ("http://xmlns.com/foaf/0.1/")  #related to person
    my_git = Namespace ("http://github.com/HelloKittyDataClan/DSexam")
   
    #create Graph
    meta_graph = Graph()
    meta_graph.bind = ("schema", schema)
    meta_graph.bind = ("foaf", schema)
    meta_graph.bind = ("git", my_git)

  # attributes related to classes
    title = URIRef("https://schema.org/title")
    date = URIRef("https://schema.org/dateCreated")
    owner = URIRef("http://github.com/HelloKittyDataClan/DSexam/owner")
    place = URIRef("https://schema.org/itemLocation")

    identifier=URIRef("https://schema.org/identifier")

    #relation with authors among classes
    author=URIRef("https://schema.org/author")

    #attributes related to the class Person
    name=URIRef("<http://xmlns.com/foaf/0.1/name>")

    #definie classes about Cultural Object
    Person = URIRef(foaf.Person)
    NauticalChart = URIRef(my_git.NauticalChart)
    ManuscriptPlate = URIRef(my_git.ManuscriptPlate)
    ManuscriptVolume = URIRef(my_git.ManuscriptVolume)
    PrintedVolume = URIRef(my_git.PrintedVolume)
    PrintedMaterial = URIRef(my_git.PrintedMaterial)
    Herbarium = URIRef(my_git.Herbarium)
    Specimen = URIRef(my_git.Specimen)
    Painting = URIRef(my_git.Painting) 
    Model = URIRef(my_git.Model)
    Map = URIRef(schema.Map)

# This is the string defining the base URL used to defined
# the URLs of all the resources created from the data
    base_url = Namespace ("http://github.com/HelloKittyDataClan/DSexam")

    venus=read_csv(".../data/meta.csv",
                    path,
                    keep_default_na=False,
                        dtype={
                        "Id": "string",
                        "Title": "string",
                        "Date" : "string",
                        "Owner": "string",
                        "Place": "string",
                        "Type":"string"
                        "Author": "string"
                        }
                )

    for idx, row in venus.iterrows():   #mi restituisce un indice e un row che contiene i valori delle colonne
        internal_id = "culturalobject-" + str(idx)  
        subject = URIRef(base_url + internal_id)

        if row["Id"] != "":
            meta_graph.add(subject, identifier, Literal (row["Id"]))

        if row["Title"] != "":
            meta_graph.add(subject, title, Literal(row["Title"]))

        if row["Date"] != "":
            meta_graph.add(subject, date, Literal (row["Date"]))
        
        if row["Owner"] != "":
            meta_graph.add(subject, owner, Literal (row["Owner"]))
        
        if row["Place"] != "":
            meta_graph.add(subject, place, Literal (row["Place"]))

        # add to a Graph the Cultural Object
        if row["Type"] != "":
            if row["Type"].lower()=="nautical chart":
                meta_graph.add((subject, RDF.type, NauticalChart))

            elif row["Type"].lower()=="manuscript plate":
                meta_graph.add((subject, RDF.type, ManuscriptPlate))
    
            elif row["Type"].lower()=="manuscript volume":
                meta_graph.add((subject, RDF.type, ManuscriptVolume))
    
            elif row["Type"].lower()=="printed volume":
                meta_graph.add((subject, RDF.type, PrintedVolume))

            elif row["Type"].lower()=="printed material":
                meta_graph.add((subject, RDF.type, PrintedMaterial))

            elif row["Type"].lower()=="herbarium":
                meta_graph.add((subject, RDF.type, Herbarium))

            elif row["Type"].lower()=="specimen":
                meta_graph.add((subject, RDF.type, Specimen))

            elif row["Type"].lower()=="painting":
                meta_graph.add((subject, RDF.type, Painting))

            elif row["Type"].lower()=="model":
                meta_graph.add((subject, RDF.type, Model))
        
            elif row["Type"].lower()=="map":
                meta_graph.add((subject, RDF.type, Map))

            #add author
 
            if row["Author"] != "":
                authors = [author.strip() for author in row["Author"].split(',')]
                for author in authors:
                    author_node = self.get_or_create_author_node(meta_graph, author, foaf, base_url)
                    meta_graph.add((subject, author, author_node))

            # aggiunta del tipo di Oggetto Culturale
            if row["Type"] != "":
                object_type = row["Type"].lower().replace(" ", "")
                object_uri = getattr(self, object_type, None)
                if object_uri:
                    meta_graph.add((subject, RDF.type, object_uri))

        return meta_graph

    def get_or_create_author_node(self, graph, author, foaf, base_url):
        # controlla se l'autore è già presente nel grafo 
        for node, data in graph.nodes(data=True):
            if data.get('type') == 'Person' and data.get('name') == author:
                return node
        
        # se l'autore non esiste crea un nuovo nodo 
        author_uri = URIRef(base_url + f"person-{self.person_counter}")
        graph.add((author_uri, RDF.type, foaf.Person))
        graph.add((author_uri, name, Literal(author)))
        self.person_counter += 1
        return author_uri




